/*
 * validate.js 1.0.2
 * Copyright (c) 2011 Rick Harrison, http://rickharrison.me
 * validate.js is open sourced under the MIT license.
 * Portions of validate.js are inspired by CodeIgniter.
 * http://rickharrison.github.com/validate.js
 */

(function(k, l, i) {
    var m = {
        required: "请填写%s区域.",
        matches: "%s与%s不匹配.",
        valid_email: "%s区域需要一个正确的E-mail地址.",
        valid_emails: "%s区域需要包含所有正确的E-mail地址.",
        min_length: "%s区域必须有至少%s位字符.",
        max_length: "%s区域不能超过%s位字符.",
        exact_length: "%s区域必须只有%s位字符.",
        greater_than: "%s区域需要包含一个大于%s的数字.",
        less_than: "%s区域需要包含一个小于%s的数字.",
        alpha: "%s区域需要至少包含一个字母.",
        alpha_numeric: "%s区域只能包含数字和字母.",
        alpha_dash: "%s区域只能包含数字、字母、下划线和连接符.",
        numeric: "%s区域只能包含数字.",
        integer: "%s区域只能包含整形数字.",
        decimal: "%s区域只能包含十进制数字.",
        is_natural: "%s区域只能包含自然数.",
        is_natural_no_zero: "%s区域只能包含大于0的自然数.",
        valid_ip: "%s区域需要一个正确的IP地址.",
        valid_base64: "%s区域需要包含一个64位的字符串."
    },
    n = function() {},
    o = /^(.+)\[(.+)\]$/,
    h = /^[0-9]+$/,
    p = /^\-?[0-9]+$/,
    g = /^\-?[0-9]*\.?[0-9]+$/,
    j = /^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,6}$/i,
    q = /^[a-z]+$/i,
    r = /^[a-z0-9]+$/i,
    s = /^[a-z0-9_-]+$/i,
    t = /^[0-9]+$/i,
    u = /^[1-9][0-9]*$/i,
    v = /^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})$/i,
    w = /[^a-zA-Z0-9\/\+=]/i,
    e = function(a, b, d) {
        this.callback = d || n;
        this.errors = [];
        this.fields = {};
        this.form = l.forms[a] || {};
        this.messages = {};
        this.handlers = {};
        a = 0;
        for (d = b.length; a < d; a++) {
            var c = b[a];
            c.name && c.rules && (this.fields[c.name] = {
                name: c.name,
                display: c.display || c.name,
                rules: c.rules,
                type: null,
                value: null,
                checked: null
            })
        }
        this.form.onsubmit = function(a) {
            return function(b) {
                try {
                    return a._validateForm(b)
                } catch(c) {}
            }
        } (this)
    };
    e.prototype.setMessage = function(a, b) {
        this.messages[a] = b;
        return this
    };
    e.prototype.registerCallback = function(a, b) {
        a && "string" === typeof a && b && "function" === typeof b && (this.handlers[a] = b);
        return this
    };
    e.prototype._validateForm = function(a) {
        this.errors = [];
        for (var b in this.fields) if (this.fields.hasOwnProperty(b)) {
            var d = this.fields[b] || {},
            c = this.form[d.name];
            if (c && c !== i) d.type = c.type,
            d.value = c.value,
            d.checked = c.checked;
            this._validateField(d)
        }
        "function" === typeof this.callback && this.callback(this.errors, a);
        if (0 < this.errors.length) if (a && a.preventDefault) a.preventDefault();
        else return ! 1;
        return ! 0
    };
    e.prototype._validateField = function(a) {
        var b = a.rules.split("|");
        if (! ( - 1 === a.rules.indexOf("required") && (!a.value || "" === a.value || a.value === i))) for (var d = 0, c = b.length; d < c; d++) {
            var f = b[d],
            e = null,
            g = !1;
            if (parts = o.exec(f)) f = parts[1],
            e = parts[2];
            "function" === typeof this._hooks[f] ? this._hooks[f].apply(this, [a, e]) || (g = !0) : "callback_" === f.substring(0, 9) && (f = f.substring(9, f.length), "function" === typeof this.handlers[f] && !1 === this.handlers[f].apply(this, [a.value]) && (g = !0));
            if (g) { (b = this.messages[f] || m[f]) ? (a = b.replace("%s", a.display), e && (a = a.replace("%s", this.fields[e] ? this.fields[e].display: e)), this.errors.push(a)) : this.errors.push("An error has occurred with the " + a.display + " field.");
                break
            }
        }
    };
    e.prototype._hooks = {
        required: function(a) {
            var b = a.value;
            return "checkbox" === a.type ? !0 === a.checked: null !== b && "" !== b
        },
        matches: function(a, b) {
            return (el = this.form[b]) ? a.value === el.value: !1
        },
        valid_email: function(a) {
            return j.test(a.value)
        },
        valid_emails: function(a) {
            for (var a = a.value.split(","), b = 0; b < a.length; b++) if (!j.test(a[b])) return ! 1;
            return ! 0
        },
        min_length: function(a, b) {
            return ! h.test(b) ? !1 : a.value.length >= b
        },
        max_length: function(a, b) {
            return ! h.test(b) ? !1 : a.value.length <= b
        },
        exact_length: function(a, b) {
            return ! h.test(b) ? !1 : a.value.length === b
        },
        greater_than: function(a, b) {
            return ! g.test(a.value) ? !1 : parseFloat(a.value) > parseFloat(b)
        },
        less_than: function(a, b) {
            return ! g.test(a.value) ? !1 : parseFloat(a.value) < parseFloat(b)
        },
        alpha: function(a) {
            return q.test(a.value)
        },
        alpha_numeric: function(a) {
            return r.test(a.value)
        },
        alpha_dash: function(a) {
            return s.test(a.value)
        },
        numeric: function(a) {
            return g.test(a.value)
        },
        integer: function(a) {
            return p.test(a.value)
        },
        decimal: function(a) {
            return g.test(a.value)
        },
        is_natural: function(a) {
            return t.test(a.value)
        },
        is_natural_no_zero: function(a) {
            return u.test(a.value)
        },
        valid_ip: function(a) {
            return v.test(a.value)
        },
        valid_base64: function(a) {
            return w.test(a.value)
        }
    };
    k.FormValidator = e
})(window, document);